name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: acrdigitalgarage02.azurecr.io
  IMAGE_ORG: dg0410

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm test -- --coverage --passWithNoTests

    - name: SonarQube analysis
      uses: sonarqube-scanner-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=lifesub-web-lifesub-web-dg0410
          -Dsonar.sources=src
          -Dsonar.tests=src
          -Dsonar.test.inclusions=src/**/*.test.js,src/**/*.test.jsx
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lifesub-web-build
        path: build/

  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.generate-tag.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read deployment environment variables
      run: |
        while IFS='=' read -r key value || [ -n "$key" ]; do
          # Skip empty lines and comments
          if [[ -n "$key" && ! "$key" =~ ^[[:space:]]*# ]]; then
            # Remove any trailing comments
            value=$(echo "$value" | sed 's/#.*$//' | xargs)
            echo "$key=$value" >> $GITHUB_ENV
            echo "Set $key=$value"
          fi
        done < deployment/deploy_env_vars

    - name: Generate image tag
      id: generate-tag
      run: |
        IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Generated image tag: $IMAGE_TAG"

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: lifesub-web-build
        path: ./build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.registry }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      run: |
        IMAGE_TAG=${{ steps.generate-tag.outputs.image-tag }}
        
        docker build \
          --build-arg PROJECT_FOLDER="." \
          --build-arg REACT_APP_MEMBER_URL="${{ env.react_app_member_url }}" \
          --build-arg REACT_APP_MYSUB_URL="${{ env.react_app_mysub_url }}" \
          --build-arg REACT_APP_RECOMMEND_URL="${{ env.react_app_recommend_url }}" \
          --build-arg BUILD_FOLDER="deployment/container" \
          --build-arg EXPORT_PORT="${{ env.export_port }}" \
          -f deployment/container/Dockerfile-lifesub-web \
          -t ${{ env.registry }}/${{ env.image_org }}/lifesub-web:$IMAGE_TAG .
        
        docker push ${{ env.registry }}/${{ env.image_org }}/lifesub-web:$IMAGE_TAG

  deploy:
    needs: [build, release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read deployment environment variables
      run: |
        while IFS='=' read -r key value || [ -n "$key" ]; do
          # Skip empty lines and comments
          if [[ -n "$key" && ! "$key" =~ ^[[:space:]]*# ]]; then
            # Remove any trailing comments
            value=$(echo "$value" | sed 's/#.*$//' | xargs)
            echo "$key=$value" >> $GITHUB_ENV
            echo "Set $key=$value"
          fi
        done < deployment/deploy_env_vars

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group rg-digitalgarage-02 --name aks-digitalgarage-02 --overwrite-existing

    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.namespace }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Generate Kubernetes manifests
      run: |
        IMAGE_TAG=${{ needs.release.outputs.image-tag }}
        
        # Set environment variables for template substitution
        export namespace=${{ env.namespace }}
        export lifesub_web_image_path=${{ env.registry }}/${{ env.image_org }}/lifesub-web:$IMAGE_TAG
        export replicas=${{ env.replicas }}
        export export_port=${{ env.export_port }}
        export resources_requests_cpu=${{ env.resources_requests_cpu }}
        export resources_requests_memory=${{ env.resources_requests_memory }}
        export resources_limits_cpu=${{ env.resources_limits_cpu }}
        export resources_limits_memory=${{ env.resources_limits_memory }}
        
        # Generate manifest from template
        envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
        
        echo "=== Generated Kubernetes Manifest ==="
        cat deployment/deploy.yaml
        echo "===================================="

    - name: Deploy to AKS
      run: |
        kubectl apply -f deployment/deploy.yaml
        
        echo "Waiting for deployment to be ready..."
        kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/lifesub-web --timeout=300s
        
        echo "Waiting for service external IP..."
        for i in {1..60}; do
          EXTERNAL_IP=$(kubectl -n ${{ env.namespace }} get svc lifesub-web -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
          if [[ -n "$EXTERNAL_IP" ]]; then
            echo "Service external IP: $EXTERNAL_IP"
            break
          fi
          echo "Waiting for external IP... ($i/60)"
          sleep 5
        done
        
        echo "=== Deployment Status ==="
        kubectl -n ${{ env.namespace }} get pods
        kubectl -n ${{ env.namespace }} get svc
        echo "========================="
